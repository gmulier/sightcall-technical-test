# Generated by Django 4.2.7 on 2025-06-15 20:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "github_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique GitHub user ID from OAuth2",
                        max_length=100,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "avatar_url",
                    models.URLField(
                        blank=True, help_text="URL to user's GitHub avatar image"
                    ),
                ),
                (
                    "profile_url",
                    models.URLField(
                        blank=True, help_text="URL to user's GitHub profile page"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Transcript",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this transcript",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        help_text="Original filename of the uploaded transcript",
                        max_length=255,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        help_text="When the original conversation took place"
                    ),
                ),
                (
                    "duration_in_ticks",
                    models.BigIntegerField(
                        help_text="Duration of conversation in system ticks (10,000,000 ticks = 1 second)"
                    ),
                ),
                (
                    "phrases",
                    models.JSONField(
                        help_text="Array of conversation phrases with text, timestamps, and metadata"
                    ),
                ),
                (
                    "fingerprint",
                    models.CharField(
                        help_text="SHA-256 hash of transcript content for duplicate detection",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this transcript was uploaded"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who uploaded this transcript",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transcripts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "fingerprint")},
            },
        ),
        migrations.CreateModel(
            name="Tutorial",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this tutorial",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        default="",
                        help_text="AI-generated title for this tutorial",
                        max_length=200,
                    ),
                ),
                (
                    "introduction",
                    models.TextField(
                        default="",
                        help_text="AI-generated introduction explaining the tutorial content",
                    ),
                ),
                (
                    "steps",
                    models.JSONField(
                        default=list,
                        help_text="Array of step-by-step instructions as strings",
                    ),
                ),
                (
                    "examples",
                    models.JSONField(
                        default=list, help_text="Array of practical examples as strings"
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        default="",
                        help_text="AI-generated summary concluding the tutorial",
                    ),
                ),
                (
                    "duration_estimate",
                    models.CharField(
                        default="",
                        help_text="Estimated time to complete this tutorial",
                        max_length=50,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list,
                        help_text="Array of relevant tags/keywords for this tutorial",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this tutorial was last updated"
                    ),
                ),
                (
                    "transcript",
                    models.ForeignKey(
                        help_text="Source transcript this tutorial was generated from",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutorials",
                        to="tutorials.transcript",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
    ]
