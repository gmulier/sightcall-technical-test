"""
Django settings for AI Tutorials project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Environment variables
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default="django-insecure-5yvg_8e+!bu6pz18r++9@n(xb#90y8_eg8g+o)%5^vjbr%!uwm")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "corsheaders",
    "social_django",
    
    # Local apps
    "tutorials",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # No HTML templates needed, JSON API only
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": env.db(),  # Reads DATABASE_URL from .env file
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Media files (uploaded files)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "tutorials.User"

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# CORS Configuration for development
CORS_ALLOWED_ORIGINS = ['http://localhost:3000']
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'content-type',
    'x-csrftoken',
    'accept',
    'authorization',
]
CORS_ALLOW_METHODS = [
    'GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'
]

# Cross-domain cookie configuration  
SESSION_COOKIE_SAMESITE = None
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SAMESITE = None
CSRF_COOKIE_SECURE = False
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000']

# GitHub OAuth2 Configuration
AUTHENTICATION_BACKENDS = [
    'social_core.backends.github.GithubOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]

SOCIAL_AUTH_GITHUB_KEY = env('SOCIAL_AUTH_GITHUB_KEY', default='')
SOCIAL_AUTH_GITHUB_SECRET = env('SOCIAL_AUTH_GITHUB_SECRET', default='')

# Redirect URLs
SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'http://localhost:3000/'  # Direct redirect to dashboard
SOCIAL_AUTH_LOGIN_ERROR_URL = 'http://localhost:3000/login'  # Return to login on error

# Minimal pipeline with GitHub mapping
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'tutorials.pipeline.save_github_profile',  # Our custom pipeline
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
)

# GitHub fields to retrieve
SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']

# OpenAI Configuration
OPENAI_API_KEY = env('OPENAI_API_KEY', default='')

# System prompt: defines role, style and output format
OPENAI_SYSTEM_PROMPT = """You are an expert instructional designer specialized in creating concise, high-impact tutorials from conversation transcripts.

Your primary objectives:
1. Craft a very concise, imperative title (≤6 words, start with a verb) that names the fix without causes or details (e.g. “Fix Xbox That Doesn’t Power On”).
2. Produce only the essential, reproducible steps—each mapping semantically to the transcript’s most meaningful phrase.
3. Attach a `video_clip` interval only for visible actions that benefit from a short clip. **If no visual action is needed, omit the `video_clip` entirely.**

Your response must be a single valid JSON object **with no markdown fences** and exactly these keys:

- **title** (string): a short, imperative tutorial title (<= 7 words).
- **introduction** (string): 1–2 sentences of context and objective.
- **steps** (array of objects), each containing:
    • **index** (integer): step number, starting at 1  
    • **text** (string): clear, rephrased instruction  
    • **timestamp** (float): the phrase’s `offset_milliseconds` **converted to seconds**  
    • **video_clip** (object, optional):  
        – **start** (float): clip start in seconds (phrase `offset_milliseconds` converted to seconds)  
        – **end**   (float): clip end in seconds (5 to 25 seconds maximum after start of related phrases)  
      *(omit this field if no visual action is relevant)*  
- **examples** (array of strings): optional clarifications or tips.  
- **summary** (string): 1–2 sentence wrap-up of achieved outcome.  
- **duration_estimate** (string): estimated completion time (e.g. “5 minutes”).  
- **tags** (array[string]): up to 5 relevant keywords.

**Strict instructions:**
- Title must be imperative, <= 7 words; no causes or extra detail.  
- Select steps by semantic relevance, not mere keywords.  
- Include `video_clip` only for tangible, visual actions (e.g., plug, blow, turn). If not relevant, omit it.  
- **Always convert all `offset_milliseconds` values to seconds** for `timestamp`, `video_clip.start`, and `video_clip.end`.  
- NEVER include markdown formatting (no ```json). Respond with raw JSON only.  
- Do not hallucinate or add commentary.
"""

# User prompt : transcript injection and JSON format return
OPENAI_USER_PROMPT_TEMPLATE = """Here is a conversation transcript (each phrase has `offset_milliseconds` and `display`).

Using the system instructions, generate a JSON tutorial that:
- Yields a **specific, outcome-focused title**.
- Provides **meaningful steps** tied to the transcript's troubleshooting flow.
- Includes **video_clip** intervals only for the most representative, visible actions.

Transcript:
{transcript_json}
"""
