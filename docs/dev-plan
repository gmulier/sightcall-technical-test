# Plan de développement MVP

> ⚠️ **Note pour l'IA (Claude)** :
> - Suis impérativement chaque étape **une par une**, en les réalisant successivement.
> - À chaque étape, **attends la validation** de l'utilisateur avant de continuer.
> - Ne complexifie pas le projet inutilement ; conserve un code **très propre** et **minimaliste**.
> - **Évite** la génération de fichiers superflus qui ne servent à rien.

## 1. Initialisation du projet
1. Créer le repo GitHub + setup `.gitignore`
2. Initialiser l’environnement virtuel (poetry / pipenv / venv)
3. Ajouter les dépendances backend :
   - Django, djangorestframework
   - social-auth-app-django
   - psycopg2-binary (PostgreSQL)
   - openai
4. Initialiser le projet Django (`django-admin startproject`)
5. Créer l’app `tutorials` (`manage.py startapp tutorials`)

## 2. Configuration de base

### 2.1. Lancement de PostgreSQL en local (Docker)
1. Créer un fichier `docker-compose.yml` à la racine :
   ```yaml
   version: "3.8"
   services:
     db:
       image: postgres:15
       restart: always
       environment:
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres
         POSTGRES_DB: aitutorials
       ports:
         - "5432:5432"
       volumes:
         - db_data:/var/lib/postgresql/data

   volumes:
     db_data:

	2.	Démarrer la base :

docker-compose up -d


	3.	Vérifier que Postgres tourne sur localhost:5432 (user/password/database = postgres).

2.2. Configuration Django
	1.	Installer les utilitaires de config :

pip install django-environ psycopg2-binary


	2.	Créer un fichier .env dans le dossier projet :

DATABASE_URL=postgres://postgres:postgres@localhost:5432/aitutorials


	3.	Modifier settings.py pour utiliser django-environ :

import environ
import os

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

DATABASES = {
    "default": env.db(),  # lit DATABASE_URL
}


	4.	Appliquer les premières migrations :

python manage.py migrate



3. Authentification GitHub
	1.	Enregistrer l’OAuth App GitHub (Client ID / Secret)
	2.	Configurer social-auth-app-django pour le flow Authorization Code
	3.	Exposer les routes /auth/login/github/ et /auth/complete/github/
	4.	Tester le login redirection → callback → création de l’utilisateur

4. Modèles et serializers
	1.	Définir le modèle Transcript :

class Transcript(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="transcripts")
    timestamp = models.DateTimeField()
    duration_in_ticks = models.BigIntegerField()
    phrases = models.JSONField()


	2.	Définir le modèle Tutorial :

class Tutorial(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    transcript = models.ForeignKey(Transcript, on_delete=models.CASCADE, related_name="tutorials")
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


	3.	Créer les serializers correspondants :
	•	TranscriptSerializer exposant id, user, timestamp, duration_in_ticks, phrases
	•	TutorialSerializer exposant id, transcript, content, created_at, updated_at

5. Endpoints API (DRF)
	1.	POST /api/transcripts/ → upload du JSON via MultiPartParser
	2.	POST /api/transcripts/{id}/generate/ → stub de génération (appel à GPT à intégrer ensuite)
	3.	GET /api/tutorials/ → liste des tutos de l’utilisateur
	4.	GET / PUT /api/tutorials/{id}/ → détail + édition

6. Intégration GPT
	1.	Implémenter un service gpt_processor.py avec une fonction generate_tutorial(transcript_text) :
	•	Phase 1 (stub) : renvoie un texte factice “Étape 1… Étape 2…”
	•	Phase 2 : remplacer par un appel openai.ChatCompletion.create()
	2.	Lier ce service à l’endpoint /generate/

7. Frontend React minimal
	1.	Initialiser un projet React + TypeScript (create-react-app ou Vite)
	2.	Installer jsxstyle
	3.	Implémenter le flow :
	•	Page Login → redirige vers Django
	•	Page Upload → formulaire avec FormData
	•	Page Liste → fetch /api/tutorials/
	•	Page Détail/Édition → formulaire textarea + bouton Save
	4.	Gérer le token/session utilisateur (cookie HttpOnly ou header Authorization)

8. Tests manuels & documentation
	1.	Vérifier les flows complets (login → upload → génération → affichage)
	2.	Mettre à jour README.md avec :
	•	Instructions d’installation
	•	Endpoints clés
	•	Variables d’environnement requises
	•	Commandes Docker pour la DB
	3.	Générer la première doc OpenAPI avec drf-spectacular

